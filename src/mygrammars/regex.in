@header {
package mygenerated.regex;
import generator.Tree;
}

start [returns  Tree]
    : re {return new Tree("Start", re.get(0));}
    | {return new Tree("Start");}
    ;

re [returns  Tree]
    : concat re_p {return new Tree("RE", concat.get(0), re_p.get(0));};

re_p [returns  Tree]
    : OR concat re_p {return new Tree("RE'", concat.get(0), re_p.get(0));}
    | {return new Tree("RE'");}
    ;

concat [returns  Tree]
    : kleene concat_p {return new Tree("concat", kleene.get(0), concat_p.get(0));};

concat_p [returns  Tree]
    : kleene concat_p {return new Tree("concat'", kleene.get(0), concat_p.get(0));}
    | {return new Tree("concat'");}
    ;

kleene [returns  Tree]
    : n kleene_p {return new Tree("kleene", n.get(0), kleene_p.get(0));};

kleene_p [returns  Tree]
    : ASTERISK kleene_p {return new Tree("kleene'", new Tree(ASTERISK.get(0)), kleene_p.get(0));}
    | {return new Tree("kleene'");}
    ;

n [returns  Tree]
    : CHAR {return new Tree("n", new Tree(CHAR.get(0)));}
    | OPEN_BRACKET re CLOSE_BRACKET {return new Tree("n", new Tree(OPEN_BRACKET.get(0)), re.get(0), new Tree(CLOSE_BRACKET.get(0)));}
    | OPEN_SQUARE chars CLOSE_SQUARE { return new Tree("n", new Tree(OPEN_SQUARE.get(0)), chars.get(0), new Tree(CLOSE_SQUARE.get(0))); }
    ;

chars [returns Tree]
    : CHAR chars_p { return new Tree("chars", new Tree(CHAR.get(0)), chars_p.get(0)); };

chars_p [returns Tree]
    : chars { return chars.get(0); }
    | {return new Tree("chars_p");}
    ;

OR: '|';
OPEN_BRACKET : '(' ;
CLOSE_BRACKET : ')' ;
OPEN_SQUARE : '[' ;
CLOSE_SQUARE : ']' ;
ASTERISK: '*' | '+';
CHAR : '/[a-z]/';