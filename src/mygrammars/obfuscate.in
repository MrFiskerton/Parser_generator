@header {
package mygenerated.obfuscate;
import generator.Tree;
import java.util.*;
}

@members {

private static Map<String, String> identifierMap = new HashMap<String, String>();

static void write(String x) {System.out.print(x);}

static void debug(String x) {System.err.print(x);}

static String last_result = "";

static String generateIDENTIFIER() {
    StringBuilder result = new StringBuilder();
    Random r = new Random();

    final String alphabet = "OI10";

    if (!last_result.isEmpty()) {
        if (last_result.contains("0")) {
            last_result = last_result.replace('0', 'O');
            return last_result;
        } else if (last_result.contains("1")) {
            last_result = last_result.replace('1', 'I');
            return last_result;
        }
        last_result = "";
    }

    int min_length = 5;
    result.append(alphabet.charAt(r.nextInt(alphabet.length() - 2)));
    for (int i = 1; i < r.nextInt(13) + min_length; i++) {
        result.append(alphabet.charAt(r.nextInt(alphabet.length())));
    }
    last_result = result.toString();

    return last_result;
}

static void declareIdentifier(String identifier) {
    String new_identifier;
    do {
        new_identifier = generateIDENTIFIER();
    } while (identifierMap.containsValue(new_identifier));
    identifierMap.put(identifier, new_identifier);
}

static String obfuscate(String identifier) {
    if(!identifierMap.containsKey(identifier)) {
        declareIdentifier(identifier);
    }
    return identifierMap.get(identifier);
}

static void tabs(int amount) {for(int i=0; i<amount; i++) System.out.print(' ');}

}
//end members

start: includes main;
includes: include includes | {};
include
    :   INCLUDE LS IDENTIFIER print_include[{IDENTIFIER.get(0)}] GR;
print_include[String id]: {write("#include <" + id + ">\n");};

main
    : INT MAIN LPAREN RPAREN print_main body | {};
print_main: {write("\nint main () ");};

body: lfparen items rfparen;
lfparen: LFPAREN {write("{\n");};
rfparen: RFPAREN {write("}\n");};

print_tabs[int amount]: {tabs(amount);};
print_newline: {write("\n");};

items
    : item print_newline items | {};

item
    : declaration | statement;

declaration: type simple_declaration semicolon;
id: IDENTIFIER {write(obfuscate(IDENTIFIER.get(0))); };

statement: sum;
sum: id assign id plus id semicolon;

semicolon: SEMI {write(";");};
assign: EQ {write(" = ");};
intconst: INTCONST {write(INTCONST.get(0));};
plus: PLUS {write(" + ");};

simple_declaration: declare_id assign intconst;
declare_id: IDENTIFIER obfuscate_id[{IDENTIFIER.get(0)}];
obfuscate_id[String id]: {declareIdentifier(id); write(" " + obfuscate(id)); };

type
    :   VOID  {write("void");}
    |   CHAR  {write("char");}
    |   SHORT {write("short");}
    |   INT   {write("int");}
    |   FLOAT {write("float");}
    |   DOUBLE{write("double");}
    ;

IDENTIFIER: '/[a-z_A-Z]([a-zA-Z_]|[0-9])*/';
INTCONST: '/[1-9][0-9]*/';
//INCLUDE_IDENTIFIER: '/[a-z_]([a-z_]|[0-9])*/';

VOID: 'void';
CHAR: 'char';
SHORT: 'short';
INT:   'int';
FLOAT: 'float';
DOUBLE: 'double';
MAIN: 'main';
INCLUDE: '#include';
DOTH: '.h';

LS: '<';
GR: '>';
EQ: '=';

PLUS: '+';

LPAREN  : '(';
RPAREN  : ')';
LFPAREN: '{';
RFPAREN: '}';

DOT     : '.';
SEMI    : ';';
COMMA   : ',';

IF: 'if';
ELSE: 'else';
FOR: 'for';