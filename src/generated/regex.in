@header {
package regex;
import generator.Tree;
}

@members {

}

start [returns  Tree]
    : e {return new Tree("S", e.get(0));}
    | {return new Tree("S");};
e [returns  Tree]
    : t e1 {return new Tree("E", t.get(0), e1.get(0));};
e1 [returns  Tree]
    : OR t e1 {return new Tree("E'", t.get(0), e1.get(0));}
    | {return new Tree("E'");};
t [returns  Tree]
    : f t1 {return new Tree("T", f.get(0), t1.get(0));};
t1 [returns  Tree]
    : f t1 {return new Tree("T'", f.get(0), t1.get(0));}
    | {return new Tree("T'");};
f [returns  Tree]
    : a f1 {return new Tree("F", a.get(0), f1.get(0));};
f1 [returns  Tree]
    : ASTERISK f1 {return new Tree("F'", new Tree(ASTERISK.get(0)), f1.get(0));}
    | {return new Tree("F'");};

a [returns  Tree]
    : CHAR {return new Tree("A", new Tree(CHAR.get(0)));}
    | OPEN_BRACKET e CLOSE_BRACKET {return new Tree("A", new Tree(OPEN_BRACKET.get(0)), e.get(0), new Tree(CLOSE_BRACKET.get(0)));}
    | OPEN_SQUARE chars CLOSE_SQUARE { return new Tree("A", new Tree(OPEN_SQUARE.get(0)), chars.get(0), new Tree(CLOSE_SQUARE.get(0))); };

chars [returns Tree]
    : CHAR charrs { return new Tree("chars", new Tree(CHAR.get(0)), charrs.get(0)); };

charrs [returns Tree]
    : chars { return chars.get(0); }
    | {return new Tree("charrs");};

OR: '|';
OPEN_BRACKET : '(' ;
CLOSE_BRACKET : ')' ;
OPEN_SQUARE : '[' ;
CLOSE_SQUARE : ']' ;
ASTERISK: '*' | '+';
CHAR : 'a' | 'b' | 'c' | 'd' | 'e' | 'f';